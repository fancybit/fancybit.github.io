<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>c# - Tag - 数语轩</title>
    <link>https://www.fancybit.top/tags/c#/</link>
    <description>c# - Tag - 数语轩</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 14 Sep 2022 00:53:43 &#43;0000</lastBuildDate><atom:link href="https://www.fancybit.top/tags/c#/" rel="self" type="application/rss+xml" /><item>
  <title>C# obfuscar代码混淆备忘</title>
  <link>https://www.fancybit.top/archives/871/</link>
  <pubDate>Wed, 14 Sep 2022 00:53:43 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/871/</guid>
  <description><![CDATA[从nuget安装Obfascar包，不用GlobalTool
在项目中创建obfucar.xml
在生成后事件里，
注意这里是Obfuscar 不是obfascator
然后是一个简单的obfuscar.xml范例
有关配置文件详情看这里：
Configuration — obfuscar 2.2 documentation]]></description>
</item>
<item>
  <title>Unity3d Mirror插件联机开发备忘</title>
  <link>https://www.fancybit.top/archives/854/</link>
  <pubDate>Wed, 22 Jun 2022 14:47:40 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/854/</guid>
  <description><![CDATA[1、序列化的对象不能含有环状引用，一个典型的例子是单例模式，它的instance静态变量肯定要引用到本体，所以需要注意。如果拿这种对象去spawn，即使在NetworkManager里注册了这个物体 也一样会spawn失败，因为中途涉及到序列化，传输，反序列化的步骤。解决这种问题的简单方法目前想到的是设置一个数据类型，保证其中不包含环状引用 然后在客户端拿这个类型的对象来收集无法序列化的类的对象成员，然后进行序列化或者反序列化，或者去spawn
2、没有Spawn过的对象上调用ClientRPC方法会被忽略，而Spawn的对象需要和服务端同步，所以需要被序列化。mirror的序列化不可以包含环状引用，因此单例对象上是无法调用ClientRPC的，需要把这些单例去掉，才能在上面使用ClientRPC。
3、如果没有NetworkManager在场景里的话，挂上NetworkIdentity标签的物体会在场景启动时被禁用，还不知道为什么这么设计，猜测可能是为了避免不同时生成物体造成的跨端（服务端客户端）id混乱，毕竟全都spawn出来的话，生成的物体的identity的netid是一致的。
4、一个物体刚在服务端spawn的时候对它调用Rpc方法会失效，可能是客户端还没来得及生成对应的物体。这种情况需要用协程来延迟，也可以用UniTask库的async await轮询器和封装好的等待对象。
5、NetworkIdentity 的Server only属性被勾选的时候就不会在Spawn之后自动在客户端生成对应物体。
6、默认NetworkTransform的缩放同步是未开启的。
7、对一个对象使用NetworkServer.Spawn的时候，会同时在客户端创建其子对象树结构，但是未使用NetworkBehaviour的对象是否会一起创建？答案是会的，有一个例外就是一个spawn出来的transform树形体系只能在根对象有一个IdentifyComponent。其他子级不能有Identify或者从NetworkBehaviour派生的component,因为会自动引入IdentifyComponent。这种情况就需要写代码自行完成spawn之后的对象体系的挂接工作。
8、在一个跟节点有IdentifyComponent的体系上，被序列化的体系内不能有序列化不支持的类型，包括Component或者GameObject。但是我们可以在生成的体系中把层级关系让unity内置的transform树形结构来维护，这可以解决大部分引用不含IdentityComponent的子级节点的引用会妨碍序列化的问题。另外含有IdentifyComponent的子级组件的引用不会妨害序列化，因为这部分会自动被过滤掉不参加序列化，需要自行Spawn再挂接。
9、序列化只能保持在prefab就有的transform层级结构,从场景中的物体进行序列化的话，用代码后续添加的子级不会跟着被序列化传递到客户端。因为本质上spawn就是把用于寻找资源的AssetID发送到客户端，然后客户端同样用AssetID来找到预制件，然后实例化预制件，赋予同时传递来的NetID，用于接收后续发来的同步消息的分发凭据。所以服务端的物体，实例化后，spawn之前的对象层级变化，都不会在客户端同步，甚至可能造成不存在的NetID的问题。
10、command方法里再调用command方法可能造成服务端执行不完整，应该避免。
11、SyncXXX系列容器里同步一样是用Waves，所以元素类型不能是GameObject或者Component。可以通过存储NetId来变通实现远程同步。
12、isServer isClient isServerOnly isLocalPlayer
13、NetworkServer和NetworkClient是Transporter上第二层的连接和通信
14、NetworkServer.AddPlayer(conn,gameObject)把一个gameObject关联到一个conn作为Player的表示物体。conn的identity属性被赋予gameObject的identity组件。
15、调用NetworkManager游戏场景切换时，服务端先进行切换，然后广播场景切换消息到所有客户端，在LateUpdate里轮询检测场景切换是否完成:
，然后各自调用状态同步代码。
替换roomPlayer到gamePlayer和传递参数
创建RoomPlayer
NetworkRoomManager.OnClientEnterRoom添加RoomPlayerObject
NetworkRoomPlayer的OnGUI绘制了自己的准备状态和按钮
NetworkRoomManager的OnGUI绘制了进入房间后的UI底版
设置了DontDestroyOnLoad的对象如果重新设置setParent会导致不销毁标记失效]]></description>
</item>
<item>
  <title>2021-11-3开发日志</title>
  <link>https://www.fancybit.top/archives/785/</link>
  <pubDate>Thu, 04 Nov 2021 02:16:07 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/785/</guid>
  <description><![CDATA[今天搞定了unity桌宠的透明和使用像素做鼠标穿透的问题，主要参考这个油管视频：
unity中有些涉及windows的操作 .net必须选择.net framework4.x，同时引用来的.net dll也必须是.net 4.x的一套]]></description>
</item>
<item>
  <title>Unity调用Windows API备忘</title>
  <link>https://www.fancybit.top/archives/114/</link>
  <pubDate>Tue, 18 May 2021 18:54:11 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/114/</guid>
  <description><![CDATA[最近接了个麻将游戏项目，需要用到一些透明的异形窗体。然后就需要用Interop库提供的功能引入一些windows api来调用。
首先要把unity的窗口做成有透明部分需要至少调用2个主要API，一个是SetWindowLong,一个是DwmExtendFrameIntoClientArea。前者是设置窗口显示模式，需要加上WS_EX_LAYERED风格。后者是设置可绘制客户区，把标题栏也归入可绘制控制区域。类似这样的调用方式：
随后需要离开半透明载入的场景后停止窗口的透明状态，需要重新调用一次SetWindowLong和DwmExtendFrameIntoClientArea
另外加上的这行对SetLayeredWindowAttributes的调用，是把窗体的透明度恢复为不透明，如果没有这个调用，在unity里半透明渲染的东西可能会和unity窗口之后的屏幕内容发生混色，非常的难看。
然后是获取当前窗口句柄的方法：
这样s_hwnd就存入了当前unity窗口的句柄。注意这里只对已经打包后的PC WINDOWS端有效，对于编辑器里的窗口是无效的，因为注册的类名就不同。
windows api中的char*类型参数可以用StringBuilder来获取，注意要多预留一个字节的容量用于存储C风格字符串的结尾字符“\0”
如果你需要获取其他类型的窗口，可以打开spy++去查找窗口，记录下窗口的类名就可以用上面的方法获取句柄了，很通用。还可以结合窗体的标题名。
具体的常量数值可以参考windows的头文件或者msdn手册。]]></description>
</item>
<item>
  <title>unity&#43;Live2D采坑记录</title>
  <link>https://www.fancybit.top/archives/111/</link>
  <pubDate>Thu, 28 Jan 2021 03:37:32 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/111/</guid>
  <description><![CDATA[拖放进去的live2d不显示：
有时候拖放live2d模型动画文件进untiy之后会显示不出来，打开drawables子级可以看到里面的子物体都有一个MeshFilter组件，并且组件的mesh为空。但是看下面的CubismRenderer组件里有一个mesh属性里面是有数据的。这种情况只要点播放按钮进入一次游戏 在场景中展示一次 随后MeshFilter里就有内容了，模型也就可以看的见了。初步判断应该是live2d给unity的SDK里有些应该awake里写的初始化代码写到了Start里面，所以必须启动一次触发一次Start才能完成初始化。有空分析一下看看有没必要发个pull request修复。
Live2D模型代码里改参数无效：
通过Parameters下面的子物体改参数以后，需要去调用一次CubismModel.ForceUpdateNow()才能生效。建议所有参数修改完毕后再调用，也可以直接在Model的Update方法里调用这个。]]></description>
</item>
<item>
  <title>Unity插件OdinInspector系列要点记录</title>
  <link>https://www.fancybit.top/archives/110/</link>
  <pubDate>Tue, 29 Dec 2020 08:54:41 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/110/</guid>
  <description><![CDATA[对于Dictionary&lt;T,T&gt;之类的unity本身不支持序列化的字段，需要使用[OdinSerialize]标签来进行序列化存储。
需要启用Odin Inspector增强的组件需要从SerializedMonoBehaviour类型继承。
更换了组件的序列化方式之后，可能需要删除掉组件再添加组件，然后重启Unity编辑器。否则会出现一些莫名其妙的BUG。]]></description>
</item>
<item>
  <title>Shader编程备忘</title>
  <link>https://www.fancybit.top/archives/100/</link>
  <pubDate>Thu, 23 Apr 2020 04:24:04 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/100/</guid>
  <description><![CDATA[目前效果
B站：https://www.bilibili.com/video/bv1Wa4y147Nr
cg的乘法运算符是数值对乘 对向量和矩阵要求尺寸一致，cg的向量点积和向量矩阵 矩阵矩阵乘法用mul函数
只有4维的向量vector可以作为向量参数 设置Blend 并且才能启用半透明混合效果
透明相关tag参看这里:https://www.cnblogs.com/0kk470/p/8250704.html
Blend参数看这里：https://blog.csdn.net/LeeXxs/article/details/85112661
用材质制作摄像机后处理效果时候，如果修改fragment shader出现拖影问题，就要在代码里把RenderTexture上面每一次处理绘制成全白，木有找到clear的办法只能先这样：]]></description>
</item>
<item>
  <title>.net core webapi跨域问题</title>
  <link>https://www.fancybit.top/archives/86/</link>
  <pubDate>Thu, 20 Feb 2020 17:30:13 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/86/</guid>
  <description><![CDATA[跨域问题是通过ajax在一个域A访问域B上的资源的时候 需要在B域的跨域列表里加上A。
另外一个重点是判断2个域是否跨域需要3个要素 协议(http或者https,ftp) 地址(包含域名) 端口号 三者有一个不同就是跨域的
比如 http://abc.com:8888 和 https://abc.com:8888是2个域 http://localhost:12345 和 http://127.0.0.1:12345 也是2个域
.net core 的跨域设置看这里:
https://www.jianshu.com/p/26c2108bab05
尤其最后一个不要漏掉
.net core webapi跨域问题 跨域 cors webapi c# 第1张]]></description>
</item>
<item>
  <title>平衡大师</title>
  <link>https://www.fancybit.top/archives/69/</link>
  <pubDate>Sun, 22 Dec 2019 05:09:01 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/69/</guid>
  <description><![CDATA[说明： 进入游戏后以手机平放 沿中心上下方向的轴旋转手机控制杆子旋转保持球不会掉下去或者碰到管子刀子等
如果手机没有重力加速计支持，可以用手指在杆子下方左右滑动，控制杆子倾斜
每坚持一秒获得一金币
管子落到下面没有碰到 每个管子一金币
吃到金币增加6金币
被刀刺中游戏立即结束 刀碰到金币会改变方向
目前还是测试版有些功能还在开发中
一点感想：这小破东西玩了一会儿不禁让我自己都感慨起人生了，手忙脚乱控制着平衡，躲过数不尽的障碍，为财富的诱惑铤而走险，好不容易极限求生最后又不知哪来的飞刀突然干掉。这破游戏一如笔者的餐具人生&hellip;
欢迎反馈意见
fancybit
QQ:148332727
数语社QQ群：1025446555
下载地址： 平衡大师点击下载 游戏截图： 平衡大师 unity C# android 第1张平衡大师 unity C# android 第2张开发日志 2019-12-22 ]]></description>
</item>
<item>
  <title>Unity高速物体穿透问题</title>
  <link>https://www.fancybit.top/archives/60/</link>
  <pubDate>Sun, 24 Nov 2019 17:09:47 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/60/</guid>
  <description><![CDATA[下次再把以前学过的物理引擎相关算法原理整理一下发出来
这里安利一个物理引擎相关的帖子：
https://www.zhihu.com/question/277300055?sort=created]]></description>
</item>
</channel>
</rss>
