<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>实验研究 - Category - 数语轩</title>
    <link>https://www.fancybit.top/categories/%E5%AE%9E%E9%AA%8C%E7%A0%94%E7%A9%B6/</link>
    <description>实验研究 - Category - 数语轩</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 14 Sep 2022 00:53:43 &#43;0000</lastBuildDate><atom:link href="https://www.fancybit.top/categories/%E5%AE%9E%E9%AA%8C%E7%A0%94%E7%A9%B6/" rel="self" type="application/rss+xml" /><item>
  <title>C# obfuscar代码混淆备忘</title>
  <link>https://www.fancybit.top/archives/871/</link>
  <pubDate>Wed, 14 Sep 2022 00:53:43 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/871/</guid>
  <description><![CDATA[从nuget安装Obfascar包，不用GlobalTool
在项目中创建obfucar.xml
在生成后事件里，
注意这里是Obfuscar 不是obfascator
然后是一个简单的obfuscar.xml范例
有关配置文件详情看这里：
Configuration — obfuscar 2.2 documentation]]></description>
</item>
<item>
  <title>Unity3d Mirror插件联机开发备忘</title>
  <link>https://www.fancybit.top/archives/854/</link>
  <pubDate>Wed, 22 Jun 2022 14:47:40 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/854/</guid>
  <description><![CDATA[1、序列化的对象不能含有环状引用，一个典型的例子是单例模式，它的instance静态变量肯定要引用到本体，所以需要注意。如果拿这种对象去spawn，即使在NetworkManager里注册了这个物体 也一样会spawn失败，因为中途涉及到序列化，传输，反序列化的步骤。解决这种问题的简单方法目前想到的是设置一个数据类型，保证其中不包含环状引用 然后在客户端拿这个类型的对象来收集无法序列化的类的对象成员，然后进行序列化或者反序列化，或者去spawn
2、没有Spawn过的对象上调用ClientRPC方法会被忽略，而Spawn的对象需要和服务端同步，所以需要被序列化。mirror的序列化不可以包含环状引用，因此单例对象上是无法调用ClientRPC的，需要把这些单例去掉，才能在上面使用ClientRPC。
3、如果没有NetworkManager在场景里的话，挂上NetworkIdentity标签的物体会在场景启动时被禁用，还不知道为什么这么设计，猜测可能是为了避免不同时生成物体造成的跨端（服务端客户端）id混乱，毕竟全都spawn出来的话，生成的物体的identity的netid是一致的。
4、一个物体刚在服务端spawn的时候对它调用Rpc方法会失效，可能是客户端还没来得及生成对应的物体。这种情况需要用协程来延迟，也可以用UniTask库的async await轮询器和封装好的等待对象。
5、NetworkIdentity 的Server only属性被勾选的时候就不会在Spawn之后自动在客户端生成对应物体。
6、默认NetworkTransform的缩放同步是未开启的。
7、对一个对象使用NetworkServer.Spawn的时候，会同时在客户端创建其子对象树结构，但是未使用NetworkBehaviour的对象是否会一起创建？答案是会的，有一个例外就是一个spawn出来的transform树形体系只能在根对象有一个IdentifyComponent。其他子级不能有Identify或者从NetworkBehaviour派生的component,因为会自动引入IdentifyComponent。这种情况就需要写代码自行完成spawn之后的对象体系的挂接工作。
8、在一个跟节点有IdentifyComponent的体系上，被序列化的体系内不能有序列化不支持的类型，包括Component或者GameObject。但是我们可以在生成的体系中把层级关系让unity内置的transform树形结构来维护，这可以解决大部分引用不含IdentityComponent的子级节点的引用会妨碍序列化的问题。另外含有IdentifyComponent的子级组件的引用不会妨害序列化，因为这部分会自动被过滤掉不参加序列化，需要自行Spawn再挂接。
9、序列化只能保持在prefab就有的transform层级结构,从场景中的物体进行序列化的话，用代码后续添加的子级不会跟着被序列化传递到客户端。因为本质上spawn就是把用于寻找资源的AssetID发送到客户端，然后客户端同样用AssetID来找到预制件，然后实例化预制件，赋予同时传递来的NetID，用于接收后续发来的同步消息的分发凭据。所以服务端的物体，实例化后，spawn之前的对象层级变化，都不会在客户端同步，甚至可能造成不存在的NetID的问题。
10、command方法里再调用command方法可能造成服务端执行不完整，应该避免。
11、SyncXXX系列容器里同步一样是用Waves，所以元素类型不能是GameObject或者Component。可以通过存储NetId来变通实现远程同步。
12、isServer isClient isServerOnly isLocalPlayer
13、NetworkServer和NetworkClient是Transporter上第二层的连接和通信
14、NetworkServer.AddPlayer(conn,gameObject)把一个gameObject关联到一个conn作为Player的表示物体。conn的identity属性被赋予gameObject的identity组件。
15、调用NetworkManager游戏场景切换时，服务端先进行切换，然后广播场景切换消息到所有客户端，在LateUpdate里轮询检测场景切换是否完成:
，然后各自调用状态同步代码。
替换roomPlayer到gamePlayer和传递参数
创建RoomPlayer
NetworkRoomManager.OnClientEnterRoom添加RoomPlayerObject
NetworkRoomPlayer的OnGUI绘制了自己的准备状态和按钮
NetworkRoomManager的OnGUI绘制了进入房间后的UI底版
设置了DontDestroyOnLoad的对象如果重新设置setParent会导致不销毁标记失效]]></description>
</item>
<item>
  <title>C#中webbrowser与javascript(js)交互的方法</title>
  <link>https://www.fancybit.top/archives/800/</link>
  <pubDate>Sun, 28 Nov 2021 06:41:36 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/800/</guid>
  <description><![CDATA[C#调用js
js调用c#]]></description>
</item>
<item>
  <title>vscode调试typescript</title>
  <link>https://www.fancybit.top/archives/793/</link>
  <pubDate>Wed, 24 Nov 2021 15:08:08 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/793/</guid>
  <description><![CDATA[vscode本身支持ts调试： 只要在tsconfig.json里打开sourceMap = true就可以启动源码映射文件(*.map)来进行运行时ts断点调试。 终端-》新建终端 创建一个终端窗口 如果已经有终端窗口可以略过这一步 点击终端面板右上角添加终端的+右边的向下箭头，选择创建js调试终端： 这个时候在这个终端里启动的node.js运行js的实例都会进行调试，遇到ts或者js断点都会暂停然后查看状态。
安装一个vscode插件typescript debugger可以把调试过程做的更简单，F5一键进入调试模式： 1.搜索安装typescript debugger插件，然后切换到debug设置状态：
2.创建一个调试配置文件，选择ts debug
3.下图这里把标记的地方改成启动的js文件相对路径，比如./dist/app.js,然后保存
4.在随意一个终端里运行npm install -dev ts-node 安装所需的包
5.完成后就可以F5一键键开始调试了，同样是支持js和ts断点，只要tsconfig.json里启用了sourceMap文件生成]]></description>
</item>
<item>
  <title>win10核心层虚拟机双机调试 VirtualKD-Redux&#43;WinDBG</title>
  <link>https://www.fancybit.top/archives/792/</link>
  <pubDate>Tue, 23 Nov 2021 15:48:41 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/792/</guid>
  <description><![CDATA[先到微软的网站下载Windows10的SDK和对应版本WDK
安装win10 sdk 其中包含WinDBG调试器
安装对应版本WDK
vmware workstation 15-16虚拟机上安装windows10
虚拟机菜单上找安装VMWare tools
从下面地址下载Release的VirtualKD-Redux
https://github.com/4d61726b/VirtualKD-Redux
在宿主机（真机）解压缩VirtualKD-Redux的压缩包，根据虚拟机的操作系统位数，把对应的Target文件夹复制到虚拟机，然后在里面找到vminstall.exe文件双击安装。
安装的时候可以选择新建启动项或者改变原有启动项。win10一定要确保选项选中
在真机上根据真机win10位数启动vmmon64.exe或者vmmon32.exe，随后在虚拟机win10存在的状态下点击一下patch，然后设置一下windbg所在的路径。
每次调试前需要先打开这个程序，并且调试结束前不要关闭，它还要继续工作以维持连接并加速数据传输。
重新启动虚拟机 到启动项选择的时候，确保选中VirtualKD-Redux的那一项，然后不是按回车而是按F8，选择“禁用驱动程序强制签名”来继续启动windows。这个时候可以立刻用VMWARE做一个状态镜像，这样以后就不用每次启动都按F8，只要载入这个状态镜像即可。
这时候正常情况下windbg就会在虚拟机进入windows徽标显示的载入过程中自动启动并且连接，这时调试环境就已经搞定了，在windbg里可以继续运行或者随时中断虚拟机里win10的所有线程。也可以加载PDB，源代码来进行断点调试了。如果windbg没有断下来，可以再次重启，或者从vmmon（32/64）上还原快照来再次尝试。]]></description>
</item>
<item>
  <title>NPM install -save 和 -save-dev 傻傻分不清</title>
  <link>https://www.fancybit.top/archives/775/</link>
  <pubDate>Sun, 03 Oct 2021 08:12:00 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/775/</guid>
  <description><![CDATA[NPM install -save 和 -save-dev 傻傻分不清
回顾 npm install 命令 最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。
我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：
&lt;td&gt; &lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;moduleName&lt;/code&gt;&lt;br /&gt;&lt;code&gt;# 安装模块到项目目录下&lt;/code&gt; &lt;br /&gt;&lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-g moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。&lt;/code&gt;&lt;br /&gt;&lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-save moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。&lt;/code&gt; &lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-save-dev moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。&lt;/code&gt; &lt;/td&gt; 那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。
npm install moduleName 命令 安装模块到项目node_modules目录下。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -g moduleName 命令 安装模块到全局，不会在项目node_modules目录中保存模块包。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -save moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入dependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install &ndash;production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。 npm install -save-dev moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入devDependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install &ndash;production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。 总结 devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。]]></description>
</item>
<item>
  <title>Anaconda &#43; VSCode 最详细教程</title>
  <link>https://www.fancybit.top/archives/774/</link>
  <pubDate>Fri, 01 Oct 2021 16:17:53 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/774/</guid>
  <description><![CDATA[写在前面 为了录制这篇教程，我又把电脑上的 Python 卸载了🕹，重新安装 Anaconda 和 VSCode ，并录制动图。文章每个步骤介绍的很详细，只要跟着GIF动图一步一步操作就可以，适合零基础的朋友，通过这篇文章可以让你学会自己运行 Py 文件、以及一些发布出来的 Py 代码段，同时也是为了让更多人迈出学习 Python 的第一个门槛，后续也会写一些 Python 爬虫案例，用于工商信息查询、地址查询、快递查询等，所以为了这些工具，赶紧学起来吧📘。
现在 Python 的广告可谓铺天盖地，文章、朋友圈、各种网页基本都能看到，虽然有些广告确实夸大了 Python 的作用，标题很雷人，但是无论如何也反映了一种趋势，未来编程思维很重要。而我们看待 Python 等编程语言应保持客观，能够帮到自己那就值得花点时间学习，入门之后才知道是不是自己的菜。
「戏」说 Python image
写在前面 为了录制这篇教程，我又把电脑上的 Python 卸载了🕹，重新安装 Anaconda 和 VSCode ，并录制动图。文章每个步骤介绍的很详细，只要跟着GIF动图一步一步操作就可以，适合零基础的朋友，通过这篇文章可以让你学会自己运行 Py 文件、以及一些发布出来的 Py 代码段，因为封装成 EXE 不方便调试和更新，同时也是让更多人迈出学习 Python 的第一个门槛，后续也会写一些 Python 爬虫案例，用于工商信息查询、地址查询、快递查询等，所以为了这些工具，赶紧学起来吧📘。
一、Anaconda 下载 Anaconda 可以看做Python的一个集成安装，安装它后就默认安装了python、IPython、集成开发环境Spyder和众多的包和模块，让你在管理环境和包时更加方便。
可以选择从官网或清华源下载 Anaconda 安装包，清华源下载速度相对较快。
安装的位数推荐32位，兼容性最强，也可以根据自己的系统位数选择安装。
官网：https://www.anaconda.com/products/individual
官网
清华源：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/
清华源
二、Anaconda 安装 安装过程中三个注意的地方：
勾选 Alls Users 勾选 Add Anaconda to the system PATH environment variable 如果之前没有安装 VSCode，可以在 Anaconda 安装过程中选择安装 Anaconda 安装]]></description>
</item>
<item>
  <title>Docker复习备忘</title>
  <link>https://www.fancybit.top/archives/773/</link>
  <pubDate>Wed, 29 Sep 2021 09:28:22 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/773/</guid>
  <description><![CDATA[Docker Windows使用wsl后端可以提高性能
-p xxx[宿主机口号]:xxx[docker容器内端口号]
当宿主机内使用非0.0.0.0 Listen的时候，可能导致宿主机转发来的连接断开，所以如果宿主机内可以curl到内容，但是宿主机浏览器显示socket hang up以及empty_response错误的时候，很可能就是宿主机内listen的IP不对，用0.0.0.0监听所有来源地址即可。
把容器名和镜像名取同一个 然后commit xxx xxx即可把容器状态同步给镜像文件了
每一句都会生成一个中间缓存，所以不变的尽量靠前放，经常变化的比如入口点，复制文件之类的往后放。但是也要注意不要搞错依赖关系致使中间出错。
Dockerfile进行build的时候需要很多错综复杂的国外网络地址，所以与其来回折腾换源提速，还不如直接用一个VPN暂时把所有流量走国外加速VPN，可以解决很多缺失问题。
pip安装python模块的时候经常会遇到一些.h文件缺失，这种情况一般是用yum来安装缺少的xxx-dev xxx-devel之类的支持库即可解决。
COPY . .可以和WorkDir配合，WorkDir指定的是容器内的文件系统路径，而COPY的第一个参数是相对于Dokerfile放置的目录，第二个是基于WorkDir参数的容器内路径，注意顺序。
用.dockerIgnore排除掉.git应该可以避免不需要的git历史占据的空间。
如果dockerfile构建的时候需要清理每一句的缓存，可以在docker后添加&ndash;no-cache参数来不用缓存彻底从头构建
vscode有一个docker插件可以浏览修改docker内部 不过我觉得还是用VI做小修小改更顺手。不过拿来检查docker内的文件是否正确更新是个好东西。
vscode带的DOKERFILE语法格式识别还不错，右键就可以构建]]></description>
</item>
<item>
  <title>windows下运行语音识别项目wenet Demo</title>
  <link>https://www.fancybit.top/archives/765/</link>
  <pubDate>Sun, 19 Sep 2021 15:52:18 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/765/</guid>
  <description><![CDATA[wenet是个语音识别AI 效果感觉还不错 只是在windows下直接下载demo会需要修改些指令 说明文档里写的是适合linux的指令。我这里把自己修改后的可以在windows10下执行的指令列出来 原本步骤参见GITHUB:
https://github.com/wenet-e2e/wenet/blob/main/README_CN.md
OK这就可以方便windows用户 不用再切换到linux或者在虚拟机中运行docker了 应该可以提高效率也方便点
源项目地址：]]></description>
</item>
<item>
  <title>win10自带ubuntu开启和安装pip过程记录</title>
  <link>https://www.fancybit.top/archives/764/</link>
  <pubDate>Fri, 17 Sep 2021 07:08:22 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/764/</guid>
  <description><![CDATA[ylyyyy 2018-12-20 14:49:32 3901 收藏 2
版权
开启win10自带ubuntu
进入【设置&ndash;更新和安全&ndash;针对开发人员模式】，选择开发人员模式，等待系统自动安装，安装完成后，提示“已安装开发人员模式程序包…”，如下图所示。
控制面板&ndash;程序&ndash;程序和功能&ndash;启用或关闭windows功能，勾选适用于Linux的windows子系统。如下图所示。
点击确定，重新启动电脑
按win+r输入bash，没反应就进入cmd下输入bash
在Windows应用商店搜索ubuntu
200M左右，下载，启动即可
一些包的安装
cat /etc/issue查看ubuntu版本，最新的应该是ubuntu18.04
一般情况下，ubuntu内置Python，新的应该是Python 3.6，可输入Python -V 或Python3 -V查看
首先更新update更新管理工具
sudo apt-get update
sudo apt install yum
安装pip
sudo apt-get install python3-pip
过程比较慢，应该先换源的
换源参考：
https://blog.csdn.net/weixin_40240670/article/details/81198749
————————————————
版权声明：本文为CSDN博主「ylyyyy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_40240670/article/details/85121265]]></description>
</item>
</channel>
</rss>
