<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>转载 - Category - 数语轩</title>
    <link>https://www.fancybit.top/categories/%E8%BD%AC%E8%BD%BD/</link>
    <description>转载 - Category - 数语轩</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 23 Jan 2022 13:51:05 &#43;0000</lastBuildDate><atom:link href="https://www.fancybit.top/categories/%E8%BD%AC%E8%BD%BD/" rel="self" type="application/rss+xml" /><item>
  <title>【初音ミク】神っぽいな【中、日、羅歌詞】</title>
  <link>https://www.fancybit.top/archives/803/</link>
  <pubDate>Sun, 23 Jan 2022 13:51:05 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/803/</guid>
  <description><![CDATA[★
作詞：ピノキオピー作曲：ピノキオピー編曲：ピノキオピーGuitar： ヤヅキPV：ピノキオピー唄：初音ミク
中文翻譯：月勳
愛のネタバレ　「別れ」っぽいなai no neta bare &ldquo;wakare&rdquo; ppo i na愛的透露劇情　真像「別離」呢
人生のネタバレ　「死ぬ」っぽいなjinsei no neta bare &ldquo;shinu&rdquo; ppo i na人生的透露劇情　真像「死亡」呢
なにそれ意味深でかっこいいじゃん…na ni so re imishin de kakko i i jyan&hellip;那是什麼　這不是意義深長而且很帥嘛…
それっぽい単語集で踊ってんだ　失敬so reppo i tango syuu de odotte n da shikkei在像是那個的單字本上起舞著　失禮
とぅ　とぅる　とぅ　とぅ　とぅる　&ldquo;風&quot;tu tu ru tu tu tu ru &ldquo;fuu&quot;To　Toul　To　To　Toul　&ldquo;風&rdquo;
とぅ　とぅる　とぅ　とぅ　とぅる　&ldquo;風&quot;tu tu ru tu tu tu ru &ldquo;fuu&quot;To　Toul　To　To　Toul　&ldquo;風&rdquo;]]></description>
</item>
<item>
  <title>windows驱动开发-物理双机调试</title>
  <link>https://www.fancybit.top/archives/791/</link>
  <pubDate>Tue, 23 Nov 2021 05:09:19 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/791/</guid>
  <description><![CDATA[作者
QQ群：852283276
微信：arm80x86
微信公众号：青儿创客基地
B站：主页 https://space.bilibili.com/208826118
参考
VS2012 ddk驱动编译与虚拟机联机调试设置（vs调试驱动）
用USB 3.0 + WinDbg开始你的调试之旅
方法
通过网线调试的优点有只要插上网线，电脑可以随便放了，我在研一用无线网卡貌似也可以配置调试环境，可以用一台调试计算机可以调试多台网络内的目标计算机，而且网卡非常常见，现在的计算机已经很少有串口和1394 fire wire。至于usb，我还没研究怎么搞到适当的连接线连接两台电脑，微软的网页也懒得看了，配一种方式够用即可。
防火墙先关掉，出错了还不知道原因，网线直连不行的请搞个交换机或者路由器过来，进行双机互ping测试，貌似是两个网卡都得有自动交换功能才能直连。微软官网里有支持调试的网卡列表，网线标准网上说是CAT5或更好的线。
配置目标计算机
管理员模式运行cmd 开启调试模式 bcdedit /debug on
设置网络调试接口bcdedit /dbgsettings net hostip:192.168.1.6 port:54321 端口号Port
Number取值范围为49152到65535，此端口号在调试计算机上会用到
将cmd中产生的口令Key拷贝出来，在调试计算机上配置WinDbg调试环境时会用到
对于有多块网卡的目标计算机，还要设置调试网卡所在的PCI总线、设备、功能号 重启目标计算机
操作记录
Microsoft Windows [版本 6.3.9600]
(c) 2013 Microsoft Corporation。保留所有权利。
C:\Windows\system32&gt;bcdedit /debug on
操作成功完成。
C:\Windows\system32&gt;bcdedit /dbgsettings net hostip:192.168.1.6 port:54321
Key=se79bf657uf1.335dplfrhcali.3f7us0hrxvlx9.2reuein5hf0t4
C:\Windows\system32&gt;bcdedit /set &ldquo;{dbgsettings}&rdquo; busparams 2.0.0
操作成功完成。
C:\Windows\system32&gt;
配置调试计算机
我下载的是针对Win7的WDK7600.16385.1，这是以前MSDN疯狂找到的ISO，大四的时候瞎折腾搞到的，现在下载都去Windows硬件开发人员中心，WDK7600安装包中带的WinDbg版本太低，好像对NET调试不太支持，虽然Kernel Debug中NET选项卡，但是只有端口号Port Number输入编辑框，并没有Key的输入编辑框，联想到说NET调试至少Win8以上，想下一个新版WDK，里面肯定有新版WinDbg，上网一看，WDK都到Win10，艾玛，跟不上发展了。下了Win10的WDK，官网也找了以前Win8.1的连接，可是下不了了，不知为啥，就算了，装WDK10吧，从SDK中也可以获得WinDbg调试器，想想这会小哥还在西安出差。
在Win8以后的驱动开发，微软都集成到了Visual Studio中，不打算用IDE的，可是NET调试环境要求至少Win8，WDK7600不能编译Win8上的驱动，符号表什么也没下Win8的，那我现在配置这个环境用处不大啊，还不如直接用VS开发，配置过程微软都自动化了。
果然，新版WinDbg的NET调试选项里有key，搞上了，开始连接目标计算机，此处我有两处很恶心的小细节，第一个就是调试计算机连接目标计算机的时候，目标计算机要重启，第二个就是微软官网上说会出来以下画面：
而我的是
然后就卡住了，然后我把直连网线，换成了交换机，还是一样，后来发现只要点击工具栏上的break按钮就好了，真是醉哭了，囧。
2015/10/22 09:05:50 今天早上把交换机撤了，网线直连测了一下，可以调试，这样看来就确实很方便了，比串口还方便，速度也快，不是所有机器都有串口的，而且串口线的通信质量不能让人放心啊。]]></description>
</item>
<item>
  <title>NPM install -save 和 -save-dev 傻傻分不清</title>
  <link>https://www.fancybit.top/archives/775/</link>
  <pubDate>Sun, 03 Oct 2021 08:12:00 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/775/</guid>
  <description><![CDATA[NPM install -save 和 -save-dev 傻傻分不清
回顾 npm install 命令 最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。
我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：
&lt;td&gt; &lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;moduleName&lt;/code&gt;&lt;br /&gt;&lt;code&gt;# 安装模块到项目目录下&lt;/code&gt; &lt;br /&gt;&lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-g moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。&lt;/code&gt;&lt;br /&gt;&lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-save moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。&lt;/code&gt; &lt;code&gt;npm install&lt;/code&gt; &lt;code&gt;-save-dev moduleName &lt;/code&gt;&lt;br /&gt;&lt;code&gt;# -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。&lt;/code&gt; &lt;/td&gt; 那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。
npm install moduleName 命令 安装模块到项目node_modules目录下。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -g moduleName 命令 安装模块到全局，不会在项目node_modules目录中保存模块包。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -save moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入dependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install &ndash;production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。 npm install -save-dev moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入devDependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install &ndash;production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。 总结 devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。]]></description>
</item>
<item>
  <title>Anaconda &#43; VSCode 最详细教程</title>
  <link>https://www.fancybit.top/archives/774/</link>
  <pubDate>Fri, 01 Oct 2021 16:17:53 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/774/</guid>
  <description><![CDATA[写在前面 为了录制这篇教程，我又把电脑上的 Python 卸载了🕹，重新安装 Anaconda 和 VSCode ，并录制动图。文章每个步骤介绍的很详细，只要跟着GIF动图一步一步操作就可以，适合零基础的朋友，通过这篇文章可以让你学会自己运行 Py 文件、以及一些发布出来的 Py 代码段，同时也是为了让更多人迈出学习 Python 的第一个门槛，后续也会写一些 Python 爬虫案例，用于工商信息查询、地址查询、快递查询等，所以为了这些工具，赶紧学起来吧📘。
现在 Python 的广告可谓铺天盖地，文章、朋友圈、各种网页基本都能看到，虽然有些广告确实夸大了 Python 的作用，标题很雷人，但是无论如何也反映了一种趋势，未来编程思维很重要。而我们看待 Python 等编程语言应保持客观，能够帮到自己那就值得花点时间学习，入门之后才知道是不是自己的菜。
「戏」说 Python image
写在前面 为了录制这篇教程，我又把电脑上的 Python 卸载了🕹，重新安装 Anaconda 和 VSCode ，并录制动图。文章每个步骤介绍的很详细，只要跟着GIF动图一步一步操作就可以，适合零基础的朋友，通过这篇文章可以让你学会自己运行 Py 文件、以及一些发布出来的 Py 代码段，因为封装成 EXE 不方便调试和更新，同时也是让更多人迈出学习 Python 的第一个门槛，后续也会写一些 Python 爬虫案例，用于工商信息查询、地址查询、快递查询等，所以为了这些工具，赶紧学起来吧📘。
一、Anaconda 下载 Anaconda 可以看做Python的一个集成安装，安装它后就默认安装了python、IPython、集成开发环境Spyder和众多的包和模块，让你在管理环境和包时更加方便。
可以选择从官网或清华源下载 Anaconda 安装包，清华源下载速度相对较快。
安装的位数推荐32位，兼容性最强，也可以根据自己的系统位数选择安装。
官网：https://www.anaconda.com/products/individual
官网
清华源：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/
清华源
二、Anaconda 安装 安装过程中三个注意的地方：
勾选 Alls Users 勾选 Add Anaconda to the system PATH environment variable 如果之前没有安装 VSCode，可以在 Anaconda 安装过程中选择安装 Anaconda 安装]]></description>
</item>
<item>
  <title>Docker容器里centos无法使用 systemctl 命令</title>
  <link>https://www.fancybit.top/archives/770/</link>
  <pubDate>Mon, 27 Sep 2021 07:12:03 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/770/</guid>
  <description><![CDATA[提示信息：system has not been booted with systemd as systme init system（PID 1）. can&rsquo;t operate
解决办法：
命令1：docker run -tid &ndash;name 容器名称 &ndash;privileged=true 镜像ID /usr/sbin/init
命令2：docker exec -it centos01 /bin/bash
————————————————
版权声明：本文为CSDN博主「琪琪酱紫」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_26889387/article/details/110524090]]></description>
</item>
<item>
  <title>win10自带ubuntu开启和安装pip过程记录</title>
  <link>https://www.fancybit.top/archives/764/</link>
  <pubDate>Fri, 17 Sep 2021 07:08:22 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/764/</guid>
  <description><![CDATA[ylyyyy 2018-12-20 14:49:32 3901 收藏 2
版权
开启win10自带ubuntu
进入【设置&ndash;更新和安全&ndash;针对开发人员模式】，选择开发人员模式，等待系统自动安装，安装完成后，提示“已安装开发人员模式程序包…”，如下图所示。
控制面板&ndash;程序&ndash;程序和功能&ndash;启用或关闭windows功能，勾选适用于Linux的windows子系统。如下图所示。
点击确定，重新启动电脑
按win+r输入bash，没反应就进入cmd下输入bash
在Windows应用商店搜索ubuntu
200M左右，下载，启动即可
一些包的安装
cat /etc/issue查看ubuntu版本，最新的应该是ubuntu18.04
一般情况下，ubuntu内置Python，新的应该是Python 3.6，可输入Python -V 或Python3 -V查看
首先更新update更新管理工具
sudo apt-get update
sudo apt install yum
安装pip
sudo apt-get install python3-pip
过程比较慢，应该先换源的
换源参考：
https://blog.csdn.net/weixin_40240670/article/details/81198749
————————————————
版权声明：本文为CSDN博主「ylyyyy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_40240670/article/details/85121265]]></description>
</item>
<item>
  <title>基于OpenCV的全景图剪切程序：一张全景生成六张立方体天空盒图</title>
  <link>https://www.fancybit.top/archives/762/</link>
  <pubDate>Tue, 14 Sep 2021 09:48:32 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/762/</guid>
  <description><![CDATA[各种投影算法的链接：
http://paulbourke.net/geometry/transformationprojection/]]></description>
</item>
<item>
  <title>给git-bash加点儿料——gcc、make、cmake</title>
  <link>https://www.fancybit.top/archives/757/</link>
  <pubDate>Fri, 03 Sep 2021 02:08:13 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/757/</guid>
  <description><![CDATA[任卫领略真软件项目管理，真DevOps，真。。。​关注他6 人赞同了该文章
git-bash是一个mingw64环境，shell为bash，基本就和linux一样了，但它没有携带gcc和make等程序。
这两个开发工具都是常用工具，必然是要协同使用的，那我们来给git-bash加上gcc和make。
从http://www.equation.com/servlet/equation.cmd?fa=fortra 下载gcc套件，gcc套件内包含make，所以一并就装了这俩。解压gcc套件，比如默认按照在了个人账户目录内为 C:\Users\renwei\gcc ，那好，打开这个文件
添加一行：
再次打开git-bash，gcc套件内工具就能使用了，make自然包括。
如果用不到gcc，只想使用下make。那从 http://www.equation.com/servlet/equation.cmd?fa=make 下载make程序即可，同样，将make程序直接放到 C:\Program Files\Git\mingw64\bin 内就可以了。
好，我还行使用CMake，那从 https://cmake.org/download/ 下载安装包，仿前，安装后打开这个文件
再添加一行：
那我们就以googletest工程为例介绍下如何使用cmake吧
发布于 2020-06-19]]></description>
</item>
<item>
  <title>像程序员一样安装程序：Chocolatey 初见</title>
  <link>https://www.fancybit.top/archives/754/</link>
  <pubDate>Wed, 07 Jul 2021 09:16:22 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/754/</guid>
  <description><![CDATA[SanKo2019年06月26日
Matrix 精选 Matrix 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。
文章代表作者个人观点，少数派仅对标题和排版略作修改。
你一定会觉得很酷！今天，我们会尝试用一种非常程序员的方式在 Windows 上安装、卸载、管理程序。
来动手试一试吧，毕竟，这可能是你接近编程的一次美好体验。
神奇！ 要是你 在少数派上 看到了一款很好用的文件压缩工具 Bandizip，你会怎么来安装它呢？
通过文章内的链接或搜索引擎找到它的官网，点击官网的下载按钮安装 要是你使用百度，你可以在百度搜索页直接点击第三方软件下载站的按钮下载 借助各大厂家的电脑管家来搜索、下载 向身边的好友或在论坛、交流群中索要安装包 但是，今天我们会尝试一种更加有趣、方便而又可靠的方式：
使用 Chocolatey 安装 Bandizip
没错，只需要输入一行命令，稍等几分钟，Bandizip 已经在你的系统中装好啦。
安装 Chocolatey 要想这样通过命令行来一键安装程序，我们借助的是 Chocolatey 这款软件包管理器。它事实上是为了习惯于 Linux 的程序员们准备的，因为在 Linux 中安装程序，通常都只需要一条安装命令就可以完成。不过，这丝毫不影响每一个人来尝试一下。
安装 Chocolatey
Chocolatey 自身的安装很方便，一共有三步：
开始菜单中搜索 cmd，选择「命令提示符」 右键菜单或在右边菜单选择「以管理员身份运行」 复制下面这段内容，回车执行@&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot; OK 准备就绪。
前面的安装命令来自 官网的安装界面，如果有更新，还是以官网的为准。
第一次尝试 接下来，我们可以继续在这个窗口中，尝试安装我们的第一个程序。输入：
稍等片刻，Bandizip 程序就安装好了。你可以在桌面上看到它的快捷方式。
装机从此不再难 每次拿到一台新的电脑，快速安装上所有自己需要的程序是一件非常非常耗时间的事情。
如果去国内各大第三方下载站，或者电脑管家、百度的安装工具，它们很多都会把原生的安装包进行修改，加入自己的广告或其他私货；总之，下载软件还是最好去各自的官网，这样才能最好地避免病毒、保护隐私。
然而，要一个个软件分别去官网下载，既无聊，又费心。下载安装包之后，还需要手动一次次地点击「下一步」，直到全部安装完成。]]></description>
</item>
<item>
  <title>使用 pjax 实现网站无刷新加载</title>
  <link>https://www.fancybit.top/archives/719/</link>
  <pubDate>Sat, 03 Jul 2021 15:42:33 &#43;0000</pubDate>
  <author>fancybit</author>
  <guid>https://www.fancybit.top/archives/719/</guid>
  <description><![CDATA[之前也没有研究过pjax，但是没事走访别人博客时看到不少经过pjax优化的网站，响应速度很快，今天看到玖梦博客的一篇《一行代码实现全站pjax无刷新加载》测试后发发现效果确实不错，故发文记录一下。
pjax是什么
pjax是一个jQuery插件，它通过ajax和pushState技术提供了极速的（无刷新ajax加载）浏览体验，并且保持了真实的地址、网页标题，浏览器的后退（前进）按钮也可以正常使用。
pjax的工作原理是通过ajax从服务器端获取HTML，在页面中用获取到的HTML替换指定容器元素中的内容。然后使用pushState技术更新浏览器地址栏中的当前地址。
以下两点原因决定了pjax会有更快的浏览体验：
1.不存在页面资源（js/css）的重复加载和应用；
2.如果服务器端配置了pjax，它可以只渲染页面局部内容，从而避免服务器渲染完整布局的额外开销。
项目现状
jquery-pjax的维护方向：可能会继续修复重要的bug，但其功能不会再发生变化，即不会再实现新功能，也不会再扩展现有功能。
如何使用
客户端
客户端设置分两步： 1.下载插件，包括jquery1.8+，或者npm安装，这部分参考文档，不赘述。
2.初始化pjax插件，并有条件的拦截
初始化
下面代码表示：当 selector 被点击时，执行ajax请求，并将返回的HTML字符串填充在 container 标记的位置。
参数说明
selector：string类型，用于click 事件委托 的选择器。
container：string类型，用于标识唯一pjax容器的选择器。
options object类型，包含下列选项。
pjax配置选项
选项 默认值 说明
timeout 650 ajax超时时间（毫秒），超时后强制刷新整个页面
push true
使用
pushState
在浏览器中添加历史记录
replace false 替换URL地址但不添加浏览器历史记录
maxCacheLength 20 容器元素缓存内容的最大值（次）
version string或function，返回当前pjax版本
scrollTo 浏览器滚动条的垂直滚动位置。设为 false 时禁止滚动
type &ldquo;GET&rdquo;
参考
$.ajax
dataType &ldquo;html&rdquo;
参考
$.ajax
container 被替换内容元素的CSS选择器
url link.href string或function，返回ajax请求响应的URL
target link
pjax
事件
中 relatedTarget 属性的最终值]]></description>
</item>
</channel>
</rss>
